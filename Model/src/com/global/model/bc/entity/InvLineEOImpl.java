package com.global.model.bc.entity;

import com.global.model.bc.entity.base.StoreEntityBase;
import com.global.model.bc.view.InvVORowImpl;
import java.math.BigDecimal;

import oracle.jbo.ApplicationModule;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.client.Configuration;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Nov 21 23:40:52 AST 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InvLineEOImpl extends StoreEntityBase {
    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        calculateLineTotal();
        super.doDML(operation, e);
        
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        InvLineId,
        InvId{
        public Object get(InvLineEOImpl obj) {
            return obj.getInvId();
        }

        public void put(InvLineEOImpl obj, Object value) {
            obj.setAttributeInternal(index(), value);
        }
    
    },
        ProdId,
        QtyCount,
        Discount,
        UnitPrice,
        LineTotal,
        Inv,
        Prod;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int INVLINEID = AttributesEnum.InvLineId.index();
    public static final int INVID = AttributesEnum.InvId.index();
    public static final int PRODID = AttributesEnum.ProdId.index();
    public static final int QTYCOUNT = AttributesEnum.QtyCount.index();
    public static final int DISCOUNT = AttributesEnum.Discount.index();
    public static final int UNITPRICE = AttributesEnum.UnitPrice.index();
    public static final int LINETOTAL = AttributesEnum.LineTotal.index();
    public static final int INV = AttributesEnum.Inv.index();
    public static final int PROD = AttributesEnum.Prod.index();

    /**
     * This is the default constructor (do not remove).
     */
    public InvLineEOImpl() {
        
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.global.model.bc.entity.InvLineEO");
    }

    /**
     * Gets the attribute value for InvLineId, using the alias name InvLineId.
     * @return the value of InvLineId
     */
    public BigDecimal getInvLineId() {
        return (BigDecimal) getAttributeInternal(INVLINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for InvLineId.
     * @param value value to set the InvLineId
     */
    public void setInvLineId(BigDecimal value) {
        setAttributeInternal(INVLINEID, value);
    }

    /**
     * Gets the attribute value for InvId, using the alias name InvId.
     * @return the value of InvId
     */
    public BigDecimal getInvId() {
        return (BigDecimal) getAttributeInternal(INVID);
    }

    /**
     * Sets <code>value</code> as the attribute value for InvId.
     * @param value value to set the InvId
     */
    public void setInvId(BigDecimal value) {
        setAttributeInternal(INVID, value);
    }

    /**
     * Gets the attribute value for ProdId, using the alias name ProdId.
     * @return the value of ProdId
     */
    public BigDecimal getProdId() {
        return (BigDecimal) getAttributeInternal(PRODID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProdId.
     * @param value value to set the ProdId
     */
    public void setProdId(BigDecimal value) {
        setAttributeInternal(PRODID, value);
    }

    /**
     * Gets the attribute value for QtyCount, using the alias name QtyCount.
     * @return the value of QtyCount
     */
    public BigDecimal getQtyCount() {
        return (BigDecimal) getAttributeInternal(QTYCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for QtyCount.
     * @param value value to set the QtyCount
     */
    public void setQtyCount(BigDecimal value) {
        
        setAttributeInternal(QTYCOUNT, value);
        System.out.println("Qty count value ==" + value);
        calculateLineTotal();
        System.out.println("Qty count value ==2" + value);
    }

    /**
     * Gets the attribute value for Discount, using the alias name Discount.
     * @return the value of Discount
     */
    public BigDecimal getDiscount() {
        return (BigDecimal) getAttributeInternal(DISCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Discount.
     * @param value value to set the Discount
     */
    public void setDiscount(BigDecimal value) {
        setAttributeInternal(DISCOUNT, value);
        System.out.println("Discount value == "+value);
        calculateLineTotal();
        System.out.println("Discount value2 == "+value);
        
    }
    protected void calculateLineTotal(){
//        ApplicationModule am = Configuration.createRootApplicationModule("com.global.model.bc.am.AppModuleAM","AppModuleAMLocal");
        if (getQtyCount() != null  && getUnitPrice() != null) {
            BigDecimal lineTotal = getUnitPrice().multiply(getQtyCount());
            if (getDiscount() != null){
                lineTotal = lineTotal.subtract(getDiscount());
            }
            setLineTotal(lineTotal);
            

            BigDecimal calculatedInvTotal = new BigDecimal(0);
//            calculatedInvTotal = InvEO.calculateTotal();
//            System.out.println("Total Invoice = "+calculatedInvTotal);
//            InvVORowImpl invVORow = new InvVORowImpl();
//            Row row = invVORow.
//            BigDecimal calculatedInvTotal = new BigDecimal(0);
//            lineTotal = calculatedInvTotal;
//            System.out.println("Total Invoice = "+calculatedInvTotal);
////            calculatedInvTotal = invVO.calculateTotal();
//            
//            invVORow.setInvTotal (calculatedInvTotal);
            
        }
    }


    /**
     * Gets the attribute value for UnitPrice, using the alias name UnitPrice.
     * @return the value of UnitPrice
     */
    public BigDecimal getUnitPrice() {
        return (BigDecimal) getAttributeInternal(UNITPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UnitPrice.
     * @param value value to set the UnitPrice
     */
    public void setUnitPrice(BigDecimal value) {
        setAttributeInternal(UNITPRICE, value);
        calculateLineTotal();
    }

    /**
     * Gets the attribute value for LineTotal, using the alias name LineTotal.
     * @return the value of LineTotal
     */
    public BigDecimal getLineTotal() {
        return (BigDecimal) getAttributeInternal(LINETOTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for LineTotal.
     * @param value value to set the LineTotal
     */
    public void setLineTotal(BigDecimal value) {
        setAttributeInternal(LINETOTAL, value);
    }

    /**
     * @return the associated entity com.global.model.bc.entity.base.StoreEntityBase.
     */
    public InvEOImpl getInv() {
        return (InvEOImpl) getAttributeInternal(INV);
    }

    /**
     * Sets <code>value</code> as the associated entity com.global.model.bc.entity.base.StoreEntityBase.
     */
    public void setInv(InvEOImpl value) {
        setAttributeInternal(INV, value);
    }

    /**
     * @return the associated entity com.global.model.bc.entity.base.StoreEntityBase.
     */
    public StoreEntityBase getProd() {
        return (StoreEntityBase) getAttributeInternal(PROD);
    }

    /**
     * Sets <code>value</code> as the associated entity com.global.model.bc.entity.base.StoreEntityBase.
     */
    public void setProd(StoreEntityBase value) {
        setAttributeInternal(PROD, value);
    }

    /**
     * @param invLineId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal invLineId) {
        return new Key(new Object[] { invLineId });
    }


}

