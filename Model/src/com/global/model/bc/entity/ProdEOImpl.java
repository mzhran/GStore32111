package com.global.model.bc.entity;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Nov 28 23:36:16 AST 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProdEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        ProdId,
        ProdName,
        CatId,
        Price,
        Notes,
        InvLine,
        Cat;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int PRODID = AttributesEnum.ProdId.index();
    public static final int PRODNAME = AttributesEnum.ProdName.index();
    public static final int CATID = AttributesEnum.CatId.index();
    public static final int PRICE = AttributesEnum.Price.index();
    public static final int NOTES = AttributesEnum.Notes.index();
    public static final int INVLINE = AttributesEnum.InvLine.index();
    public static final int CAT = AttributesEnum.Cat.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProdEOImpl() {
    }

    /**
     * Gets the attribute value for ProdId, using the alias name ProdId.
     * @return the value of ProdId
     */
    public BigDecimal getProdId() {
        // Add any custom logic you wish to perform in this getter here.
        return (BigDecimal) getAttributeInternal(PRODID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProdId.
     * @param value value to set the ProdId
     */
    public void setProdId(BigDecimal value) {
        // Add custom validation or business logic for this setter here.
        setAttributeInternal(PRODID, value);
    }

    /**
     * Gets the attribute value for ProdName, using the alias name ProdName.
     * @return the value of ProdName
     */
    public String getProdName() {
        // Add any custom logic you wish to perform in this getter here.
        return (String) getAttributeInternal(PRODNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProdName.
     * @param value value to set the ProdName
     */
    public void setProdName(String value) {
        // Add custom validation or business logic for this setter here.
        setAttributeInternal(PRODNAME, value);
    }

    /**
     * Gets the attribute value for CatId, using the alias name CatId.
     * @return the value of CatId
     */
    public BigDecimal getCatId() {
        // Add any custom logic you wish to perform in this getter here.
        return (BigDecimal) getAttributeInternal(CATID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CatId.
     * @param value value to set the CatId
     */
    public void setCatId(BigDecimal value) {
        // Add custom validation or business logic for this setter here.
        setAttributeInternal(CATID, value);
    }

    /**
     * Gets the attribute value for Price, using the alias name Price.
     * @return the value of Price
     */
    public BigDecimal getPrice() {
        // Add any custom logic you wish to perform in this getter here.
        return (BigDecimal) getAttributeInternal(PRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Price.
     * @param value value to set the Price
     */
    public void setPrice(BigDecimal value) {
        // Add custom validation or business logic for this setter here.
        setAttributeInternal(PRICE, value);
    }

    /**
     * Gets the attribute value for Notes, using the alias name Notes.
     * @return the value of Notes
     */
    public String getNotes() {
        // Add any custom logic you wish to perform in this getter here.
        return (String) getAttributeInternal(NOTES);
    }

    /**
     * Sets <code>value</code> as the attribute value for Notes.
     * @param value value to set the Notes
     */
    public void setNotes(String value) {
        // Add custom validation or business logic for this setter here.
        setAttributeInternal(NOTES, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getInvLine() {
        return (RowIterator) getAttributeInternal(INVLINE);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getCat() {
        return (EntityImpl) getAttributeInternal(CAT);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCat(EntityImpl value) {
        setAttributeInternal(CAT, value);
    }

    /**
     * @param prodId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal prodId) {
        return new Key(new Object[] { prodId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.global.model.bc.entity.ProdEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

